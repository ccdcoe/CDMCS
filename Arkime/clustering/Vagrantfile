# -*- mode: ruby -*-
# vi: set ft=ruby :

SPLIT_DB_AND_MOLO=true
NAME="student"
BOXES=1
MEM_PER_BOX=2048
CPU_PER_BOX=4

ELA_MEM=2048
ELA_CPU=4

if SPLIT_DB_AND_MOLO == true and MEM_PER_BOX > 2048
  puts "Separate elastic vm will be created. Consider reducing the amount of memory per box"
end

$script = <<-SCRIPT
systemctl stop systemd-resolved.service
echo "nameserver 1.1.1.1" > /etc/resolv.conf
SCRIPT

$docker = <<-SCRIPT
export DEBIAN_FRONTEND=noninteractive
echo 'Acquire::ForceIPv4 "true";' | sudo tee /etc/apt/apt.conf.d/99force-ipv4
apt-get -qq -y install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
apt-get update && apt-get install -qq -y docker-ce docker-ce-cli containerd.io
systemctl enable docker.service
systemctl start docker.service
adduser vagrant docker
SCRIPT

PKGDIR="/vagrant/pkgs"
WGET_PARAMS="-4 -q"
MOLOCH="moloch_1.8.0-1_amd64.deb"

$moloch = <<-SCRIPT
FILE=/etc/sysctl.conf
grep "disable_ipv6" $FILE || cat >> $FILE <<EOF
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
EOF
grep "vm.max_map_count" $FILE || cat >> $FILE <<EOF
vm.max_map_count=262144
EOF
sysctl -p

mkdir -p #{PKGDIR}
apt-get update && apt-get -y install jq wget curl pcregrep python-minimal python-pip python3-pip python-yaml libpcre3-dev libyaml-dev uuid-dev libmagic-dev pkg-config g++ flex bison zlib1g-dev libffi-dev gettext libgeoip-dev make libjson-perl libbz2-dev libwww-perl libpng-dev xz-utils libffi-dev libsnappy-dev numactl >> /vagrant/provision.log 2>&1

cd #{PKGDIR}
[[ -f #{MOLOCH} ]] || wget #{WGET_PARAMS} https://files.molo.ch/builds/ubuntu-18.04/#{MOLOCH}
dpkg -s moloch || dpkg -i #{MOLOCH}
SCRIPT

$moloch_basic_config = <<-SCRIPT
delim=";"; ifaces=""; for item in `ls /sys/class/net/ | egrep '^eth|ens|eno|enp'`; do ifaces+="$item$delim"; done ; ifaces=${ifaces%"$deli$delim"}
delim=";"; for item in `ls /sys/class/net/ | egrep '^eth|ens|eno|enp'`; do ethtool -K $item tx off sg off gro off gso off lro off tso off ; done
cd /data/moloch/etc
cp config.ini.sample config.ini
sed -i "s,MOLOCH_ELASTICSEARCH,192.168.10.XXX:9200,g"   config.ini
sed -i "s,MOLOCH_INTERFACE,$ifaces,g"                   config.ini
sed -i "s,MOLOCH_INSTALL_DIR,/data/moloch,g"            config.ini
sed -i "s,MOLOCH_PASSWORD,test123,g"                    config.ini
cd /data/moloch/bin
./moloch_update_geo.sh > /dev/null 2>&1
mkdir -p /data/moloch/raw && chown nobody /data/moloch/raw

SCRIPT

$prep_elastic_kernel_conf = <<-SCRIPT
grep "vm.max_map_count" /etc/sysctl.conf || echo "vm.max_map_count=262144" >> /etc/sysctl.conf
sysctl -p
SCRIPT

$jupyter = <<-SCRIPT
apt-get update && apt-get install -y python3 python3-pip
su - vagrant -c "pip3 install --user --upgrade jupyter jupyterlab elasticsearch"
su - vagrant -c "pip3 install --user --upgrade chardet"
su - vagrant -c "pip3 install --user --upgrade urllib3"
su - vagrant -c "mkdir ~/.jupyter"
cat >> /home/vagrant/.jupyter/jupyter_notebook_config.json <<EOF
{
  "NotebookApp": {
    "password": "sha1:8df0e1970aef:d7e2823edc213e98342eee0b0ba2d2e652613311"
  }
}
EOF
chown vagrant /home/vagrant/.jupyter/jupyter_notebook_config.json
su - vagrant -c "nohup /home/vagrant/.local/bin/jupyter lab --ip=0.0.0.0 & sleep 1"
echo "Visit port 8888. Password is vagrant"
SCRIPT

Vagrant.configure(2) do |config|
  (1..BOXES).each do |count|

    start = 15 + count
    name = ['moloch-cluster', NAME, 'box', count.to_s].join("-")
    ip = ['192.168.10', start.to_s].join(".")

    config.vm.define name do |box|
      box.vm.box = "ubuntu/bionic64"
      box.vm.hostname = name
      box.vm.network "public_network"
      box.vm.network :private_network, ip: ip
      box.vm.provider :virtualbox do |vb|
        vb.customize ["modifyvm", :id, "--memory", MEM_PER_BOX]
        vb.customize ["modifyvm", :id, "--cpus", CPU_PER_BOX]
      end
      box.vm.provider :hyperv do |hv, override|
        hv.cpus = CPU_PER_BOX
        hv.maxmemory = MEM_PER_BOX
        override.vm.box = "generic/ubuntu1804"
        #override.vm.synced_folder ".", "/vagrant", type: "smb"
      end
      #box.vm.provision "shell", inline: $script
      box.vm.provision "shell", inline: $docker
      box.vm.provision "shell", inline: $jupyter
      box.vm.provision "shell", inline: $moloch
    end
  end
  if SPLIT_DB_AND_MOLO == true

    id = 15 + BOXES + 20
    name = ['moloch-cluster', NAME, "ela"].join("-")
    ip = ['192.168.10', id.to_s].join(".")

    config.vm.define name do |box|
      box.vm.box = "ubuntu/bionic64"
      box.vm.hostname = name
      box.vm.network "public_network"
      box.vm.network :private_network, ip: ip
      box.vm.provider :virtualbox do |vb|
        vb.customize ["modifyvm", :id, "--memory", ELA_MEM]
        vb.customize ["modifyvm", :id, "--cpus", ELA_CPU]
      end
      box.vm.provider :hyperv do |hv, override|
        hv.cpus = ELA_CPU
        hv.maxmemory = ELA_MEM
        override.vm.box = "generic/ubuntu1804"
        #override.vm.synced_folder ".", "/vagrant", type: "smb"
      end
      #box.vm.provision "shell", inline: $script
      box.vm.provision "shell", inline: $docker
      box.vm.provision "shell", inline: $prep_elastic_kernel_conf
    end
  end
end
